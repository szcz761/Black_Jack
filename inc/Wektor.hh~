
#ifndef WEKTOR_HH
#define WEKTOR_HH

#include "rozmiar.h"
#include <iostream>
using namespace std;

/*
Ta klasa modeluje pojęcie wektora o 3 wspolrzednych. W klasie zaware sa podstawowe funkcje takie jak inicjacja zdefiniowaniowanych wektorow, wyswietlenie wektora oraz funkcie get i set pojedynczych wspolczynnikow.
 */
class Wektor {
  float wsp[ROZMIAR];
public:
  Wektor()
  {
    for(int i=0;i<ROZMIAR;i++)
      { 
	wsp[i]=0;
      }
  }
  
    Wektor(float x,float y,float z)
  {
    wsp[0]=x;
    wsp[1]=y;
    wsp[2]=z;
  }

  //------------------------------------------------------------

  void wyswietlinf();

  void operator = (Wektor Wek2);

  float operator [](int i)
  {
    return wsp[i]; 
  }

  //--------------------------------------------------------------

  float getwsp(int i)
  {
    if(i>= ROZMIAR || i<0)
      {
	cerr << "W.getwsp(): zly indeks i" << endl; 
	return wsp [0];
      }
    return wsp[i];
  }
    
  void setwsp(int i, float f)
  {
    if(i>= ROZMIAR || i<0)
      cerr << "W.setwsp(): zly indeks i" << endl;
    else 
      wsp[i]=f;
  } 
 
};

/*
Przeciazenie operatora wejsciowego pozwala wprowadzac wektory przez uzycie symbolu >>. 
PRE: danymi wejciowymi jest wektr ktory chcemy rozpoznac i strumien wejciowy z biblioteki iostream. 
POST: zwraca strumień wejciowy z bibiloteki iostream co pozwala na laczenie operoperatorow wejscia.
*/
istream& operator >> (istream &Strm, Wektor &Wek);

/*
Przeciazenie operatora wyjciowego pozwala wypisywac wektory na standardowe wyjcie przez uzycie symbolu <<. 
PRE: danymi wejciowymi jest wektr ktory chcemy wypisac i strumien wyjsciowy z biblioteki iostream. 
POST: zwraca strumień wyjsciowy z bibiloteki iostream co pozwala na laczenie operoperatorow wyjscia.
*/
ostream& operator << (ostream &Strm, Wektor &Wek);

/*
Przeciążenie operacji na wektorach takich jak (kolejno) dodawanie wektorow, odejmowanie wektorow, mnozenie wekora przez liczbe, mnozenie liczny przez wektor, mnozenie 2 wektorow (iloczyn skalarny), dzielenie wktora przez liczbe.
PRE: Parametrami wejsciowymi sa w zaleznosci od operacji wekory i liczby.
POST: Parametrami wyjsciowymi sa w zaleznosci od operacji wekory i liczby.
*/
Wektor operator + (Wektor &Wek1, Wektor &Wek2);
Wektor operator - (Wektor &Wek1, Wektor &Wek2);
Wektor operator * (Wektor &Wek1, float x);
Wektor operator * (float x, Wektor &Wek1);
float operator * (Wektor &Wek1, Wektor &Wek2);
Wektor operator / (Wektor &Wek1, float x);

#endif
