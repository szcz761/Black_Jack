#ifndef MACIERZ_HH
#define MACIERZ_HH

#include "rozmiar.h"
#include <iostream>

#include "Wektor.hh"
using namespace std;

/*
Ta klasamodeluje pojecia macierzy. posiada ona macierz współczynników i wektor wyrazów wolnych.
*/
class Macierz {

  Wektor kol[ROZMIAR];
  Wektor rozw;

public:
/*
Metody zawartę w Tej klasie to inicjalizacja Macierzy, funkcje set i get które są najbardziej podstawowymi funkcjami służącymi do komunikowania się z polem prywatym. Znajduje się też przeciazenie operatora "=" i wyświetlanie informacji o macierzy oraz inicjowanie macierzy.
*/    
  
  Macierz()
  {
    Wektor x;
    for(int i=0;i<ROZMIAR;i++)
      { 
	kol[i]=x;
      }
    rozw=x;
  }

  Macierz(Wektor x,Wektor y,Wektor z)
  {
    Wektor zero;
    kol[0]=x;
    kol[1]=y;
    kol[2]=z;
    rozw=zero;
  }
  
  Macierz(Wektor x, Wektor y,Wektor z,Wektor rozwx)
  {
    kol[0]=x;
    kol[1]=y;
    kol[2]=z;
    rozw=rozwx;
  }

/*
Operator poróœnania musi znajdować sie w klasie wiec jest jedynym operatorem ktory się tu znajudje, funkcja wyswietl info jest pogladowa i urzywa sie jej tylkodo testów.    
*/
  
  void wyswietlinfo();

  void operator = ( Macierz Mac2);

  Wektor operator [](int i)
  {
    if(i==ROZMIAR)
      return rozw;
    return kol[i];
  }

/*
Funkcje get i set sa najwazniejsze bo przez nie pola prywatme mogą komunikować sie z funkcjami po za klasa 
*/
  
  Wektor& getwek(int i)
  {
    if(i==ROZMIAR)return rozw;
    if(i>ROZMIAR || i<0)
      {
	cerr << "M.getwek(): zly indeks i" << endl; 
	return kol[0];
      }
    return kol[i];
  }
  
  void setwek(int i, Wektor w)
  {
    if(i==ROZMIAR)
      rozw=w;
    if(i>ROZMIAR || i<0)
      cerr << "M.setwek(): zly indeks i" << endl;
    else
      kol[i]=w;
  }
 void zamienw(int i, int g);
};

/*
Przeciążenie operacji na wektorach takich jak (kolejno) dodawanie wektorow, odejmowanie wektorow, mnozenie wekora przez liczbe, mnozenie liczny przez wektor, mnozenie 2 wektorow (iloczyn skalarny), dzielenie wktora przez liczbe.
PRE: Parametrami wejsciowymi sa w zaleznosci od operacji wekory i liczby.
POST: Parametrami wyjsciowymi sa w zaleznosci od operacji wekory i liczby.
*/

/*
Przeciazenie operatora wejsciowego pozwala wprowadzac macierzy przez uzycie symbolu ">>". 
PRE: danymi wejciowymi jest Macierz ktora chcemy rozpoznac i strumien wejciowy z biblioteki iostream. 
POST: zwraca strumień wejciowy z bibiloteki iostream co pozwala na laczenie operoperatorow wejscia.
*/
istream& operator >> (istream &Strm, Macierz &Mac);

/*
Przeciazenie operatora wyjciowego pozwala wypisywac wektory na standardowe wyjsie przez uzycie symbolu "<<". 
PRE: danymi wejciowymi jest wektr ktory chcemy wypisac i strumien wyjsciowy z biblioteki iostream. 
POST: zwraca strumień wyjsciowy z bibiloteki iostream co pozwala na laczenie operoperatorow wyjscia.
*/
ostream& operator << (ostream &Strm, Macierz &Mac);

/*
Przeciazenie operatora * pozwala na pomnorzenie macierzy przez wektor
PRE: wejsciem jest macierz i wktor które chcemy pomnorzyc.
POST: wyjsciem jest wektor który jest wnikiem mnorzenia. 
*/
Wektor operator * (Macierz &mac1, Wektor x);

#endif
